(defvar hide-areas)
(make-variable-buffer-local 'hide-areas)
(defvar current-hide-lines)
(make-variable-buffer-local 'hide-areas)


(defun get-not-matching (search-text)
  (set (make-local-variable 'line-move-ignore-invisible) t)
  (let ((lines ()))
    (save-excursion
      (goto-char (point-min))
      (let ((start-position (point-min))
            (pos (re-search-forward search-text nil t)))
        (while pos
          (beginning-of-line)
          (push (cons start-position (point)) lines)
          (forward-line 1)
          (setq start-position (point))
          (if (eq (point) (point-max))
              (setq pos nil)
            (setq pos (re-search-forward search-text nil t))))
        (push (cons start-position (point-max)) lines)))
    lines))

(defun get-matching  (search-text)
  (set (make-local-variable 'line-move-ignore-invisible) t)
  (let ((lines ()))
    (save-excursion
      (goto-char (point-min))
      (let ((pos (re-search-forward search-text nil t))
            (start-position 0))
        (while pos
          (beginning-of-line)
          (setq start-position (point))
          (end-of-line)
          (push (cons start-position (1+ (point))) lines)
          (forward-line 1)
          (if (eq (point) (point-max))
              (setq pos nil)
            (setq pos (re-search-forward search-text nil t))))))
    lines))

(defun hide-hide-text (area)
  (let ((buffer-read-only nil)
        (buffer-modified (buffer-modified-p)))
    (mapc (lambda (line)
            (let ((start (car line))
                  (end (cdr line)))
              (put-text-property start end 'invisible t)))
          area)
    (set-buffer-modified-p buffer-modified)))

(defun hide-show-text (area)
  (let ((buffer-read-only nil)
        (buffer-modified (buffer-modified-p)))
    (mapc (lambda (line)
            (let ((start (car line))
                  (end (cdr line)))
              (put-text-property start end 'invisible nil)))
          area)
    (set-buffer-modified-p buffer-modified)))

(defun hide-not-matching (search-text)
  "Hide lines that don't match the specified regexp."
  (interactive "MHide lines not matched by regexp: ")
  (let ((lines (get-not-matching search-text)))
    (hide-hide-text lines)
    (push lines hide-areas)))

(defun hide-matching (search-text)
  (interactive "MHide lines matched by regexp: ")
  (let ((lines (get-matching search-text)))
    (hide-hide-text lines)
    (push lines hide-areas)))


(defun hide-show-matching (search-text)
  (interactive "MShow lines matched by regexp: ")
  (let ((lines (get-matching search-text)))
    (hide-show-text lines)))

(defun hide-show-pop ()
  (interactive)
  (let ((lines (pop hide-areas)))
    (hide-show-text lines)))
(defun hide-show-all ()
  (interactive)
  (setq hide-areas nil)
  (let ((lines ()))
     (push (cons 1 (point-max)) lines)
     (hide-show-text lines)))

(global-set-key (kbd "C-c h") 'hide-matching)
(global-set-key (kbd "C-c n") 'hide-not-matching)
(global-set-key (kbd "C-c s") 'hide-show-matching)
(global-set-key (kbd "C-c C-o") 'hide-show-pop)
(global-set-key (kbd "C-c C-a") 'hide-show-all)

(spacemacs/set-leader-keys (kbd "l h") 'hide-matching)
(spacemacs/set-leader-keys (kbd "l n") 'hide-not-matching)
(spacemacs/set-leader-keys (kbd "l s") 'hide-show-matching)
(spacemacs/set-leader-keys (kbd "l o") 'hide-show-pop)
(spacemacs/set-leader-keys (kbd "l a") 'hide-show-all)
